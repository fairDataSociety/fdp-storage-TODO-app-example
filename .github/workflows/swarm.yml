name: push to swarm

### run this action when something is pushed to master branch
on:
  push:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: pnpm/action-setup@v2
        with:
          run_install: false
          version: 7
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install
      - name: build
        run: npm run build
        env:
          CI: false

### upload the content of public folder to swarm
      - name: Upload
        id: swarm-upload
        uses: ethersphere/swarm-actions/upload-dir@latest
        with:
          # Fairdatasociety provides a free endpoint for uploading content to swarm
          # use .dev. for testnet uploads
          # or remove .dev. for mainnet uploads
          # or use your own private endpoint
          bee-url: https://gateway.fairdatasociety.org/proxy/
          dir: ./dist
          index-document: index.html
          timeout: 120000

      - name: update feed
        id: swarm-feed
        uses: ethersphere/swarm-actions/write-feed@latest
        with:
          # Same as above regarding bee-url
          bee-url: https://gateway.fairdatasociety.org/proxy/
          # takes the reference from the uploaded dir
          reference: ${{ steps.swarm-upload.outputs.reference }}
          # make up some topic name
          # for example: # openssl rand -hex 16
          topic: d7f07df0942edfba39c76a29f5db65da
          # signer you will want to put into your projects secrets
          # again use some random hex 32 length generation
          # for example: openssl rand -hex 32   and put the output into gihub secrets named "SIGNER"
          # https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository
          signer: ${{ secrets.SIGNER }}

# print some references of what we just uploaded to swarm
      - name: print references
        run: |
          echo "upload ref: " ${{ steps.swarm-upload.outputs.reference }}  # you can use this to access the content directly https://gateway.dev.fairdatasociety.org/bzz/<refrence>
          echo "CID: " ${{ steps.swarm-cid.outputs.cid }} # same but in cid format
          echo "Feed Manifest: " ${{ steps.swarm-feed.outputs.manifest }}  # note this reference, you will need this in next step to create a persistant reference to it using ENS

      - name: purge cache
        env:
          TOKEN: '${{ secrets.purge_token }}'
        run: |
          curl -s https://fairos.fairdatasociety.org/deploy/purge?token=$TOKEN -H "site: fairdrive"
